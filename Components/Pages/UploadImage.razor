@page "/serversignalr"
@using Azure
@using Azure.AI.Vision.ImageAnalysis
@using System.Net
@inject IWebHostEnvironment env
@* @inject BlobServiceClient blobClient *@
@using System
@inject IConfiguration Configuration
@rendermode InteractiveServer
@using PruebaAnalisisDeImagen.Components.UIElements
@using PruebaAnalisisDeImagen.Data
@using PruebaAnalisisDeImagen.Models

<div>
    <h2 class="display-4">Registro de cobros interbancarios</h2>
    Carga el archivo de registro.
</div>


@if (Message.Length > 0)
{
    <p class="alert alert-secondary" role="alert">@Message</p>
}

<EditForm Model="@Ticket" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputFile class="form-control mb-4" OnChange="@SetFile" multiple />
    <button class="btn btn-primary" type="submit">Confirmar</button>
</EditForm>


@if (imageUploaded)
{
    <MessageValidation SuccesfulWords="@succesfulWords" CompareDate="@succesfulDate" CompareTime="@successfulTime" />
    @if (elementsToStore.Count > 0)
    {
        <TableComponent elementsToStore="@elementsToStore" />
    }
}

<h3>Configurar Horarios</h3>
<EditForm Model="@TimeConfiguration" OnValidSubmit="@SaveTimeConfiguration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h4>SPI1</h4>
    <div class="form-group">
        <label for="spi1-1">1</label>
        <input type="time" id="spi1-1-start" @bind="TimeConfiguration.SPI1_1_Start" class="form-control" />
        <input type="time" id="spi1-1-end" @bind="TimeConfiguration.SPI1_1_End" class="form-control" />
    </div>
    <div class="form-group">
        <label for="spi1-2">2</label>
        <input type="time" id="spi1-2-start" @bind="TimeConfiguration.SPI1_2_Start" class="form-control" />
        <input type="time" id="spi1-2-end" @bind="TimeConfiguration.SPI1_2_End" class="form-control" />
    </div>
    <div class="form-group">
        <label for="spi1-3">3</label>
        <input type="time" id="spi1-3-start" @bind="TimeConfiguration.SPI1_3_Start" class="form-control" />
        <input type="time" id="spi1-3-end" @bind="TimeConfiguration.SPI1_3_End" class="form-control" />
    </div>

    <h4>SPI3</h4>
    <div class="form-group">
        <label for="spi3-1">1</label>
        <input type="time" id="spi3-1-start" @bind="TimeConfiguration.SPI3_1_Start" class="form-control" />
        <input type="time" id="spi3-1-end" @bind="TimeConfiguration.SPI3_1_End" class="form-control" />
    </div>
    <div class="form-group">
        <label for="spi3-2">2</label>
        <input type="time" id="spi3-2-start" @bind="TimeConfiguration.SPI3_2_Start" class="form-control" />
        <input type="time" id="spi3-2-end" @bind="TimeConfiguration.SPI3_2_End" class="form-control" />
    </div>
    <div class="form-group">
        <label for="spi3-3">3</label>
        <input type="time" id="spi3-3-start" @bind="TimeConfiguration.SPI3_3_Start" class="form-control" />
        <input type="time" id="spi3-3-end" @bind="TimeConfiguration.SPI3_3_End" class="form-control" />
    </div>

    <h4>SCI1</h4>
    <div class="form-group">
        <label for="sci1-1">1</label>
        <input type="time" id="sci1-1-start" @bind="TimeConfiguration.SCI1_1_Start" class="form-control" />
        <input type="time" id="sci1-1-end" @bind="TimeConfiguration.SCI1_1_End" class="form-control" />
    </div>
    <div class="form-group">
        <label for="sci1-2">2</label>
        <input type="time" id="sci1-2-start" @bind="TimeConfiguration.SCI1_2_Start" class="form-control" />
        <input type="time" id="sci1-2-end" @bind="TimeConfiguration.SCI1_2_End" class="form-control" />
    </div>
    <div class="form-group">
        <label for="sci1-3">3</label>
        <input type="time" id="sci1-3-start" @bind="TimeConfiguration.SCI1_3_Start" class="form-control" />
        <input type="time" id="sci1-3-end" @bind="TimeConfiguration.SCI1_3_End" class="form-control" />
    </div>

    <h4>SCI3</h4>
    <div class="form-group">
        <label for="sci3-1">1</label>
        <input type="time" id="sci3-1-start" @bind="TimeConfiguration.SCI3_1_Start" class="form-control" />
        <input type="time" id="sci3-1-end" @bind="TimeConfiguration.SCI3_1_End" class="form-control" />
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
</EditForm>



@code {
    private ServerSignalRTicket Ticket { get; set; } = new();
    private long maxFileSize = 5120000;
    private string Message { get; set; } = String.Empty;
    private List<string> analysisResult = new List<string>();
    private List<string> elementsToStore = new List<string>();
    private int succesfulWords = 4;
    private bool succesfulDate = true;
    private bool successfulTime = false;
    private string extractedDate;
    private int iii = 0;
    private bool imageUploaded = true;
    private int indice = 0;
    private ImageDTO imagedto = new ImageDTO();
    DateTime horaActual = DateTime.Now;
    string corte = "1";

    // Modelo para almacenar los horarios configurables
    private TimeConfigurationModel TimeConfiguration { get; set; } = new();

    private void SetFile(InputFileChangeEventArgs e)
    {
        Ticket.Attachment = e.File;
    }

    private async Task OnSubmit()
    {
        try
        {
            imageUploaded = false;
            succesfulWords = 4;
            analysisResult.Clear();
            elementsToStore.Clear();
            handleSCI();
            imageUploaded = true;
            indice++;
            Message = "¡Archivo cargado!";
        }
        catch (Exception e)
        {
            Message = "Error: " + e.Message;
        }
    }

    private void SaveTimeConfiguration()
    {
        Message = "Horarios guardados exitosamente.";
    }

    private void AnalyzeImage(FileStream imageFileStream)
    {
        string endpoint = Configuration["AzureVisionEndpoint"];
        string key = Configuration["AzureVisionKey"];

        ImageAnalysisClient client = new ImageAnalysisClient(
            new Uri(endpoint),
            new AzureKeyCredential(key));

        FileStream stream = imageFileStream;
        BinaryData imageData = BinaryData.FromStream(stream);

        VisualFeatures visualFeatures =
            VisualFeatures.Caption |
            VisualFeatures.Read;

        ImageAnalysisOptions options = new ImageAnalysisOptions
            {
                GenderNeutralCaption = true,
                Language = "en",
            };

        ImageAnalysisResult result = client.Analyze(
            imageData,
            visualFeatures,
            options);


        foreach (DetectedTextBlock block in result.Read.Blocks)
        {
            foreach (DetectedTextLine line in block.Lines)
            {
                foreach (DetectedTextWord word in line.Words)
                {
                    analysisResult.Add(word.Text);
                }

            }
        }
        foreach (string word in analysisResult)
        {
            Console.WriteLine($"{iii}: '{word}'");
            iii++;
        }
        FetchData();
    }

    private void CompareWithFixedData(string[] fixedData)
    {
        List<bool> comparisonResults = new List<bool>();

        for (int i = 0; i < fixedData.Length && i < analysisResult.Count; i++)
        {
            comparisonResults.Add(fixedData[i] == analysisResult[i]);
            succesfulWords++;
        }
    }

    private bool CompareWithSystemDate()
    {
        string[] numeros = new string[] { "12/07/2024", "13/07/2024" };

        Console.WriteLine(imagedto.fecha);
        if (DateTime.TryParseExact(numeros[indice], "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out DateTime extractedDate))
        {
            DateTime systemDate = DateTime.Now.Date;
            succesfulDate = extractedDate == systemDate;
            return succesfulDate;
        }
        else
        {
            throw new FormatException("The last element is not in a valid date format.");
        }
    }

    private string connectionString = "Host=192.168.137.22:5432;Username=postgres;Password=1234;Database=prueba18";

    private void FetchData()
    {
        string pattern = @"\b\d{2}/\d{2}/\d{4}\b";
        string processPattern = @"S[CP]I[1-3]";
        const int numElementsToStore = 3;
        bool processFound = false;

        for (int i = 0; i < analysisResult.Count; i++)
        {
            string str = analysisResult[i];
            MatchCollection matches = Regex.Matches(str, pattern);
            MatchCollection processMatches = Regex.Matches(str, processPattern);

            if (processMatches.Count > 0 && !processFound)
            {
                elementsToStore.Add(str);
                processFound = true;
            }

            if (matches.Count > 0)
            {
                bool previousIsDigit = i > 0 && IsDigit(analysisResult[i - 1]);
                bool nextIsDigit = i < analysisResult.Count - 1 && IsDigit(analysisResult[i + 1]);

                if (previousIsDigit && nextIsDigit)
                {
                    elementsToStore.Add(analysisResult[i - 1]);
                    elementsToStore.Add(str);

                    for (int j = 1; j <= numElementsToStore - 1 && (i + j) < analysisResult.Count; j++)
                    {
                        elementsToStore.Add(analysisResult[i + j]);
                    }
                }
            }
        }

        imagedto.corte = elementsToStore[1];
        imagedto.fecha = elementsToStore[2];
        imagedto.opis = elementsToStore[3];
        imagedto.monto = elementsToStore[4];
        imagedto.archivo = elementsToStore[0];

        using (var context = new ImageDbContext())
        {
            context.Database.EnsureCreated();

            var newImage = new ImageDTO
                {
                    corte = elementsToStore.Count > 0 ? elementsToStore[1] : null,
                    fecha = elementsToStore.Count > 1 ? elementsToStore[2] : null,
                    opis = elementsToStore.Count > 2 ? elementsToStore[3] : null,
                    monto = elementsToStore.Count > 3 ? elementsToStore[4] : null,
                    archivo = elementsToStore.Count > 4 ? elementsToStore[0] : null
                };

            context.ImgData.Add(newImage);
            context.SaveChanges();
            checkdatabase(context);
        }
    }

    private async void checkdatabase(ImageDbContext db)
    {
        var results = from image in db.ImgData
                      select image;

        await foreach (var s in results.AsAsyncEnumerable())
        {
            Console.WriteLine("datos " + s.fecha);
        }
    }

    private bool IsDigit(string str)
    {
        if (str == null) return false;

        foreach (char c in str)
        {
            if (!char.IsDigit(c))
            {
                return false;
            }
        }
        return true;
    }


    private bool handleSCI()
    {
        var horariosSPI1 = new Dictionary<string, (TimeSpan inicio, TimeSpan fin)>
    {
        { "1", (TimeConfiguration.SPI1_1_Start.TimeOfDay, TimeConfiguration.SPI1_1_End.TimeOfDay) },
        { "2", (TimeConfiguration.SPI1_2_Start.TimeOfDay, TimeConfiguration.SPI1_2_End.TimeOfDay) },
        { "3", (TimeConfiguration.SPI1_3_Start.TimeOfDay, TimeConfiguration.SPI1_3_End.TimeOfDay) }
    };

        var horariosSPI3 = new Dictionary<string, (TimeSpan inicio, TimeSpan fin)>
    {
        { "1", (TimeConfiguration.SPI3_1_Start.TimeOfDay, TimeConfiguration.SPI3_1_End.TimeOfDay) },
        { "2", (TimeConfiguration.SPI3_2_Start.TimeOfDay, TimeConfiguration.SPI3_2_End.TimeOfDay) },
        { "3", (TimeConfiguration.SPI3_3_Start.TimeOfDay, TimeConfiguration.SPI3_3_End.TimeOfDay) }
    };

        var horariosSCI1 = new Dictionary<string, (TimeSpan inicio, TimeSpan fin)>
    {
        { "1", (TimeConfiguration.SCI1_1_Start.TimeOfDay, TimeConfiguration.SCI1_1_End.TimeOfDay) },
        { "2", (TimeConfiguration.SCI1_2_Start.TimeOfDay, TimeConfiguration.SCI1_2_End.TimeOfDay) },
        { "3", (TimeConfiguration.SCI1_3_Start.TimeOfDay, TimeConfiguration.SCI1_3_End.TimeOfDay) }
    };

        var horariosSCI3 = new Dictionary<string, (TimeSpan inicio, TimeSpan fin)>
    {
        { "1", (TimeConfiguration.SCI3_1_Start.TimeOfDay, TimeConfiguration.SCI3_1_End.TimeOfDay) }
    };

        (TimeSpan inicio, TimeSpan fin) horarios;

        switch ("SCI1")
        {
            case "SPI1":
                horarios = horariosSPI1[corte];
                break;
            case "SPI3":
                horarios = horariosSPI3[corte];
                break;
            case "SCI1":
                horarios = horariosSCI1[corte];
                break;
            case "SCI3":
                horarios = horariosSCI3[corte];
                break;
            default:
                throw new ArgumentException("Invalid 'archivo' value");
        }

        bool successfulTime = compareTime(horarios);

        return successfulTime;
    }


    private bool compareTime((TimeSpan inicio, TimeSpan fin) horarios)
    {
        var now = DateTime.Now.TimeOfDay;
        return now >= horarios.inicio && now <= horarios.fin;
    }

    private class ServerSignalRTicket
    {
        public IBrowserFile Attachment { get; set; }
    }

    public class TimeConfigurationModel
    {
        public DateTime SPI1_1_Start { get; set; }
        public DateTime SPI1_1_End { get; set; }
        public DateTime SPI1_2_Start { get; set; }
        public DateTime SPI1_2_End { get; set; }
        public DateTime SPI1_3_Start { get; set; }
        public DateTime SPI1_3_End { get; set; }

        public DateTime SPI3_1_Start { get; set; }
        public DateTime SPI3_1_End { get; set; }
        public DateTime SPI3_2_Start { get; set; }
        public DateTime SPI3_2_End { get; set; }
        public DateTime SPI3_3_Start { get; set; }
        public DateTime SPI3_3_End { get; set; }

        public DateTime SCI1_1_Start { get; set; }
        public DateTime SCI1_1_End { get; set; }
        public DateTime SCI1_2_Start { get; set; }
        public DateTime SCI1_2_End { get; set; }
        public DateTime SCI1_3_Start { get; set; }
        public DateTime SCI1_3_End { get; set; }

        public DateTime SCI3_1_Start { get; set; }
        public DateTime SCI3_1_End { get; set; }
    }

}
