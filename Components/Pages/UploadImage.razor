@page "/serversignalr"
@using Azure
@using Azure.AI.Vision.ImageAnalysis
@using System.Net
@inject IWebHostEnvironment env
@* @inject BlobServiceClient blobClient *@
@using System
@inject IConfiguration Configuration
@rendermode InteractiveServer

<div>
    <h2 class="display-4">Interactive Server Upload</h2>
</div>

@if (Message.Length > 0)
{
    <p class="alert alert-secondary" role="alert">@Message</p>
}

<EditForm Model="@Ticket" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputFile class="form-control mb-4" OnChange="@SetFile" multiple />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@if (succesfulWords == 4 && CompareWithSystemDate())
{
    <div>
        <h1>Validado exitosamente</h1>
    </div>
}else{
    <div>
        <h1>No se pudo validar exitosamente</h1>
    </div>
}

@code {
    private ServerSignalRTicket Ticket { get; set; } = new();
    private long maxFileSize = 5120000; 
    private string Message { get; set; } = String.Empty;
    private List<string> analysisResult = new List<string>();
    private int succesfulWords = 0;
    private string extractedDate;
    private int iii = 0;


    private void SetFile(InputFileChangeEventArgs e)
    {
        Ticket.Attachments = e.GetMultipleFiles();
    }

    private async Task OnSubmit()
    {
        try
        {
            foreach (var file in    Ticket.Attachments)
            {
                string safeFileName = WebUtility.HtmlEncode(file.Name);

                // Save file locally
                var path = Path.Combine(env.ContentRootPath, "images", safeFileName);
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                long fileSize = fs.Length;
                Console.WriteLine(fileSize);
                fs.Position = 0;
                AnalyzeImage(fs);
                CompareWithFixedData(["confirmado", "satisfactoriamente", "registrado", "exitosamente"]);
                fs.Close();
                File.Delete(path);

            }

            Message = "File uploaded!";
        }
        catch (Exception e)
        {
            Message = "Error: " + e.Message;
        }
    }

    private void AnalyzeImage(FileStream imageFileStream)
    {
        string endpoint = Configuration["AzureVisionEndpoint"];
        string key = Configuration["AzureVisionKey"];

        ImageAnalysisClient client = new ImageAnalysisClient(
            new Uri(endpoint),
            new AzureKeyCredential(key));

        // using FileStream stream = new FileStream("pruebavision.png", FileMode.Open);
        FileStream stream = imageFileStream;
        BinaryData imageData = BinaryData.FromStream(stream);

        VisualFeatures visualFeatures =
            VisualFeatures.Caption |
            VisualFeatures.Read;

        ImageAnalysisOptions options = new ImageAnalysisOptions
            {
                GenderNeutralCaption = true,
                Language = "en",
            };

        ImageAnalysisResult result = client.Analyze(
            imageData,
            visualFeatures,
            options);


        foreach (DetectedTextBlock block in result.Read.Blocks)
        {
            foreach (DetectedTextLine line in block.Lines)
            {
                foreach (DetectedTextWord word in line.Words)
                {
                    analysisResult.Add(word.Text);
                }

            }
        }
        foreach (string word in analysisResult)
        {
            Console.WriteLine($"{iii}: '{word}'");
            iii++;
        }
        FetchData();


    }

    private void CompareWithFixedData(string[] fixedData)
    {
        List<bool> comparisonResults = new List<bool>();


        for (int i = 0; i < fixedData.Length && i < analysisResult.Count; i++)
        {
            comparisonResults.Add(fixedData[i] == analysisResult[i]);
            succesfulWords++;
        }

    }

    private bool CompareWithSystemDate()
    {
        if (analysisResult.Count == 0)
        {
            throw new InvalidOperationException("El elemento está vacío");
        }

        string lastElement = "07/10/2024"; //analysisResult.Last();
        if (DateTime.TryParseExact(lastElement, "MM/dd/yyyy", null, System.Globalization.DateTimeStyles.None, out DateTime extractedDate))
        {
            DateTime systemDate = DateTime.Now.Date;
            return extractedDate==systemDate;
        }
        else
        {
            throw new FormatException("The last element is not in a valid date format.");
        }
    }

    //private string connectionString = "Host=192.168.137.22:5432;Username=postgres;Password=1234;Database=prueba18";

    private void FetchData()
    {
        string pattern = @"\b\d{2}/\d{2}/\d{4}\b";
        const int numElementsToStore = 3;

        /*using (var connection = new NpgsqlConnection(connectionString))
        {
            connection.Open();*/

            for (int i = 0; i < analysisResult.Count; i++)
            {
                string str = analysisResult[i];
                MatchCollection matches = Regex.Matches(str, pattern);

                if (matches.Count > 0)
                {
                    // Verificar el elemento anterior y el siguiente
                    bool previousIsDigit = i > 0 && IsDigit(analysisResult[i - 1]);
                    bool nextIsDigit = i < analysisResult.Count - 1 && IsDigit(analysisResult[i + 1]);

                    if (previousIsDigit && nextIsDigit)
                    {
                        // Almacenar el match y los siguientes elementos en la base de datos
                        List<string> elementsToStore = new List<string>();
                        elementsToStore.Add(analysisResult[i - 1]);
                        elementsToStore.Add(str); // Agregar el match actual

                        // Agregar los siguientes cinco elementos si existen
                        for (int j = 1; j <= numElementsToStore - 1 && (i + j) < analysisResult.Count; j++)
                        {
                            elementsToStore.Add(analysisResult[i + j]);
                        }


                        Console.WriteLine("Elementos a almacenar:");
                        foreach (var element in elementsToStore)
                        {

                            Console.WriteLine(element);
                            /*string insertQuery = "INSERT INTO imgData (idimg,fecha,corte,monto) VALUES (@element)";
                            using (var cmd = new NpgsqlCommand(insertQuery, connection))
                            {
                                cmd.Parameters.AddWithValue("element", element);
                                cmd.ExecuteNonQuery();
                            }*/
                        }
                        Console.WriteLine("-----");
                    }
                }

            }
        //}
    }

    private bool IsDigit(string str)
    {
        if (str == null) return false;

        foreach (char c in str)
        {
            if (!char.IsDigit(c))
            {
                return false;
            }
        }
        return true;
    }



    private class ServerSignalRTicket
    {

        public IReadOnlyList<IBrowserFile> Attachments { get; set; }
    }
}